2 Datenabstraktion
Wie bereits in Abschnitt 1.2 erwähnt, ist Datenabstraktion ein zentra-
ler Begriff in der Programmierung, vor allem in der Programmierung
im Großen. Dabei werden mehrere Methoden und Variablen zu in sich
konsistenten Einheiten zusammenzufasst, sodass diese Einheiten logi-
sche Bausteine (abstrakte Datentypen) bilden, aus denen wir ganze Pro-
gramme zusammensetzen. Wir brauchen nur abstrakte Vorstellungen
solcher Bausteine im Kopf zu haben, wenn wir sie aneinanderfügen, kei-
ne Implementierungsdetails – daher die Begriffe. Auf diese Weise hoffen
wir die Programmerstellung so weit vereinfachen zu können, dass auch
größere Programmieraufgaben handhabbar werden.
Wir betrachten zunächst das Prinzip hinter der Datenabstraktion so-
wie die entsprechenden Sprachkonstrukte in Java. Es folgen Beispiele,
die den fließenden Übergang von Datenabstraktionen zu Datenstruk-
turen verdeutlichen – eine Unterscheidung, die vor allem in der Be-
trachtungsweise liegt. Schließlich verwenden wir Datenabstraktion zur
Realisierung rekursiver Datenstrukturen.
2.1 Prinzip und Sprachunterstützung
Wir führen Objekte, Klassen und verwandte Konzepte in Java ein,
nachdem wir die Verwendung einiger einfacher abstrakter Datentypen
beispielhaft betrachtet haben.
2.1.1 Verwendung abstrakter Datentypen
Erinnern wir uns an String, den Typ von Zeichenketten in Java. Das
ist nicht nur ein Referenztyp, sondern auch ein abstrakter Datentyp:
Wir wissen zwar, dass irgendwo in einer Zeichenkette Daten enthalten
sind, aus denen sich die Länge und die einzelnen Zeichen der Zeichen-
kette rekonstruieren lassen, aber wir wissen nicht wo und in welcher
Form diese Daten genau abgelegt sind. Für die Verwendung der Zei-
chenkette brauchen wir das nicht zu wissen:
31
2 Datenabstraktion
Listing 2.1 Auf Daten in Zeichenketten wird nur über Methoden zugegriffen
1 private static void printFifthChar ( String s ) {
2 if ( s != null && s . length () > 4) {
3 System . out . print (s . charAt (4));
4 }
5 }
Da der formale Parameter s wie jede Variable eines Referenztyps null
enthalten kann, stellen wir sicher, dass s != null gilt und s eine aus-
reichende Länge hat um auf das fünfte Zeichen zugreifen zu können –
jenes mit Index 4, da das erste Zeichen über Index 0 referenziert wird.
Ausdrücke wie s.length() und s.charAt(4) stellen Methodenaufru-
fe in der Zeichenkette dar, die von s referenziert wird.1 Als Ergebnisse
bekommen wir die Länge und das Zeichen zurück. Wir veranschauli-
chen uns die Zeichenkette so:
s
String
int length()
char charAt(int index)
char[] toCharArray()
String toLowerCase()
· · ·
Wir sehen, welche Methoden wir aufrufen können bzw. welche Nach-
richten die Zeichenkette versteht, aber ein Teil der Zeichenkette ist hin-
ter einem grauen Balken versteckt und für uns nicht einsehbar. Kon-
kret sehen wir nicht, wie die Methoden implementiert sind und wie
die Daten aussehen, welche die Zeichen der Zeichenkette darstellen.
Das sind Implementierungsdetails. Wir können Zeichenketten problem-Verwendung ohne
Detailwissen los verwenden, ohne uns über die Implementierungsdetails Gedanken
machen zu müssen. Eine Voraussetzung dafür ist, dass die in String
sichtbaren Teile klar beschrieben sind2 und unsere Intuition unterstüt-
zen. Es geht also keineswegs darum, einfach nur komplexe Details weg-
zulassen. Vielmehr wird bewusst eine abstrakte Vorstellung geschaffen
um die Verwendung zu erleichtern. Implementierungsdetails sind in derabstrakte
Vorstellung abstrakten Vorstellung irrelevant. Wir können Implementierungsdetails
ändern, ohne die abstrakte Vorstellung zu beeinflussen.
2.1 Prinzip und Sprachunterstützung
Wir kennen auch schon die Verwendung von Scanner als abstrakten
Datentyp zum Einlesen von Daten:
Listing 2.2 Methoden von Scanner ändern unsichtbare Zustände
1 private static void echo () {
2 Scanner scanner = new Scanner ( System . in );
3 while ( scanner . hasNextLine ()) {
4 System . out . println ( scanner . nextLine ());
5 }
6 }
Wie auf Zeichenketten wird auf Objekte vom Typ Scanner nur über
Aufrufe von Methoden zugegriffen. Anders als Zeichenketten verfügen
Scanner über interne Zustände, die durch Methodenaufrufe geändert
werden: Durch Ausführung von scanner.nextLine() ändert sich die interner Zustand
Zeile, die als nächste einzulesen ist. Das Weiterschalten von Zeilen kön-
nen wir uns sehr anschaulich vorstellen, ohne zu wissen, was tatsächlich
passiert. Vermutlich reicht es nicht, zum Weiterschalten nur irgendwel-
che Variablenwerte im Scanner zu ändern. Der Scanner wird auf für
uns unbekannte Weise irgendwie mit dem Betriebssystem interagieren.
Aufgrund von Datenabstraktion brauchen wir uns darum glücklicher-
weise nicht zu kümmern. Dieses Beispiel zeigt, dass das abstrakte Mo-
dell (Weiterschalten von Eingaben) recht weit von der Implementierung abstraktes Modell
(komplexe Interaktion mit Betriebssystem) entfernt sein kann.
Listing 2.2 zeigt einen weiteren Aspekt: Bevor wir etwas einlesen
können, müssen wir erst ein Objekt vom Typ Scanner erzeugen. Im
entsprechenden new-Ausdruck wird System.in als Argument überge-
ben, das bestimmt, über welche Kanäle Daten einzulesen sind. Details
zu solchen Parametern werden wir in Abschnitt 2.1.4 betrachten. Auch Verändern ohne
Detailwissenohne Detailwissen ist klar, dass wir bei Verwendung abstrakter Daten-
typen entscheidenden Einfluss auf die Ausführung nehmen können, von
der Erzeugung über den gesamten Verwendungszeitraum, ohne jemals
Implementierungsdetails gesehen zu haben.
String und Scanner sind Beispiele für Tausende von vordefinier-
ten, meist gut durchdachten abstrakten Datentypen in der Entwick-
lungsumgebung von Java. Wir wollen auch eigene abstrakte Datenty-
pen erstellen, die wegen des stärkeren Anwendungsbezugs aber meist
nicht so schön in sich konsistent sind wie die vordefinierten. Zur De- Beschreibung =
abstrakter
Datentyp
monstration entwickeln wir den abstrakten Datentyp BoxedText – in-
formell beschrieben in Listing 2.3 durch Kommentare. Schon durch die
Beschreibungen können wir verstehen, was hinter BoxedText steckt.
33
2 Datenabstraktion
Listing 2.3 Kommentar zur Beschreibung von BoxedText
1 /******************* *** *** *** *** *** *** **** *** *** *** *** *
2 class BoxedText : Rectangular text within border lines .
3 Width and height of the text are initially 0.
4 Valid indexes for lines range from 0 to height - 1.
5
6 public methods :
7
8 void newDimensions ( int width , int height ):
9 Sets new text width and height to specified values .
10 Text existing so far is replaced with blank (’ ’).
11 Requires : width >= 0 and height >= 0.
12
13 void setLine ( int index , String txt ):
14 Fills line ’ index ’ with ’txt ’. If ’txt ’ is longer
15 than the text width , additional characters are
16 ignored . If ’txt ’ is shorter , the line is filled
17 with ’ ’. If ’txt ’ contains a line break , all text
18 in ’txt ’ following the line break is ignored .
19 Requires : index >= 0 and index < text height .
20
21 void print ():
22 Prints boxed text to standard output . For example ,
23 if width is 2, height is 1 and text at line 0 is
24 " ab ", the output looks like :
25 ----
26 | ab |
27 ----
28
29 String toString ():
30 Returns the same text as printed by ’ print ’
31 ( without line break at the end ).
32 ******************** *** *** *** *** *** *** **** *** *** *** *** /
Wir sehen, dass Details beschrieben sind, die für die Verwendung wich-
tig sind. Andere Details, etwa die Form, in der Text intern abgelegt
wird, sind nicht erwähnt. Nachdem wir BoxedText implementiert ha-
ben, sollte eine Ausführung von
Listing 2.4 Verwendung von BoxedText aufgrund der Beschreibung
1 private static void testBoxedText () {
2 BoxedText t = new BoxedText ();
3 t. newDimensions (10 , 3);
4 t. setLine (1 , " Das ist ein Text ");
5 t. print ();
6 }
34
2.1 Prinzip und Sprachunterstützung
folgende Ausgabe erzeugen:
------------
| |
|Das ist ei|
| |
------------
2.1.2 Datenkapselung
In Java sind abstrakte Datentypen durch Klassen implementiert. So
wie Klassen in EP1 eingesetzt wurden, können wir jedoch kaum von
abstrakten Datentypen sprechen. Eine Klasse sollten wir dann als Im- Klasse
plementierung eines abstrakten Datentyps betrachten, wenn die Klasse
• Objektvariablen deklariert, die in jedem Objekt der Klasse vor- Objektvariable
handen sind – in jedem Objekt eigene Variablen (wobei Deklara-
tionen von Objektvariablen denen lokaler Variablen ähneln, aber
nicht in Methoden, sondern direkt in Klassen stehen),
• Objektmethoden (in der Klasse, ohne static) definiert, die in Objektmethode
Objekten der Klasse ausführbar sind und auf Objektvariablen
dieser Objekte zugreifen,
• nur durch Erzeugung von einem oder mehreren Objekten der Objekt
Klasse sinnvoll verwendbar ist.
Objektvariablen – also Variablen, die zu einem Objekt gehören und im
Gegensatz zu lokalen Variablen während der gesamten Lebenszeit ei-
nes Objekts existieren – entstehen beim Erzeugen eines Objekts mittels
new. In der Regel verwenden nur Objektmethoden diese Objektvaria-
blen – siehe Abschnitt 2.1.3. Objektvariablen sind ohne Objektmetho-
den nur selten sinnvoll, genau wie Objektmethoden ohne Objektvaria-
blen. Das Zusammenfügen von Variablen und Methoden zu Objekten
nennen wir Datenkapselung – Objekte kapseln Daten und Methoden. Kapselung
Listing 2.5 zeigt eine mögliche Implementierung des in Listing 2.3
beschriebenen abstrakten Datentyps. Eine Ausführung der Methode in Implementierung
von abstraktem
Datentyp
Listing 2.4 produziert damit die oben dargestellte erwartete Ausgabe.
Eigentlich sollten die Kommentare aus Listing 2.3 bei der Klassendefi-
nition und den Methodendefinitionen stehen. Zwecks besserer Übersicht
wurden sie in Listing 2.5 weggelassen.
35
2 Datenabstraktion
Listing 2.5 Implementierung von BoxedText
1 public class BoxedText {
2
3 private int textWidth = 0;
4 private int textHeight = 0;
5 private char [][] text = new char [0][];
6
7 public void newDimensions ( int width , int height ) {
8 textWidth = width ;
9 textHeight = height ;
10 text = new char [ height ][ width ];
11 for ( char [] line : text ) { fill ( line , 0); }
12 }
13
14 public void setLine ( int index , String txt ) {
15 int i = 0;
16 if ( txt != null ) {
17 int m = Math . min ( textWidth , txt . length ());
18 while (i < m && txt . charAt ( i) != ’\n ’) {
19 text [ index ][ i ] = txt . charAt (i ++);
20 }
21 }
22 fill ( text [ index ], i );
23 }
24
25 private void fill ( char [] line , int i) {
26 for (; i < textWidth ; i ++) {
27 line [i ] = ’ ’;
28 }
29 }
30
31 public void print () {
32 System . out . println ( toString ());
33 }
34
35 public String toString () {
36 String horizontal = " - -";
37 for ( int i = 0; i < textWidth ; i ++) {
38 horizontal += " -";
39 }
40 String result = horizontal + "\ n ";
41 for ( char [] line : text ) {
42 result += "|";
43 for ( char c : line ) { result += c ; }
44 result += "|\ n ";
45 }
46 return result + horizontal ;
47 }
48 }
36
2.1 Prinzip und Sprachunterstützung
In den Zeilen 3 bis 5 in Listing 2.5 werden Objektvariablen deklariert
und initialisiert. Wie üblich beginnen die Deklarationen mit dem Wort Java
private und stehen direkt in der Klasse (nicht in einer Methode),
gleichen sonst aber syntaktisch lokalen Variablendeklarationen.
Die in EP1 verwendeten Methoden begannen (außer main) meist
mit private static. In Listing 2.5 beginnen viele mit public und
enthalten kein static. Die Bedeutung von private und public wer- Java
den wir in Abschnitt 2.1.3 analysieren. Zunächst ist das Weglassen von
static wichtig: Methoden ohne static sind Objektmethoden. Eine Objektmethode
verwendet
Objektvariablen
Objektmethode kann auf Objektvariablen in gleicher Weise zugreifen
wie auf formale Parameter und lokale Variablen, wie an vielen Stellen
in Listing 2.5 zu sehen ist. Wenn ein Methodenkopf dagegen static
enthält – wir sprechen von statischen Methoden oder Klassenmethoden Klassenmethode
kennt keine
Objektvariablen
– darf die Methode nicht auf Objektvariablen zugreifen. Eine Klasse
kann sowohl Objektmethoden als auch Klassenmethoden enthalten; in
BoxedText stehen aber nur Objektmethoden.
Objektmethoden rufen wir anders auf als Klassenmethoden. Für den
Aufruf einer Objektmethode benötigen wir ein Objekt der entsprechen-
den Klasse, für den Aufruf einer Klassenmethode nur die Klasse selbst.
Wenn o als Objektmethode und c als Klassenmethode in Klasse C
implementiert ist, können wir die Aufrufe so schreiben:
C.c(...); // Aufruf von c in Klasse C
C x = new C(); // Erzeugen von Objekt x der Klasse C
x.o(...); // Aufruf von o in Objekt x
Das hat den Grund, dass bei Ausführung von o auf die Objektvaria-
blen des Objekts in x zugegriffen werden kann, während zur Ausfüh-
rung von c keine Objektvariablen nötig sind. Konkrete Beispiele sind
die Aufrufe von Objektmethoden in Listing 2.4 sowie der Aufruf der
Klassenmethode min aus Math in Zeile 17 von Listing 2.5.
Innerhalb der Klasse BoxedText sehen wir das Objekt, das die zuge- aktuelles Objekt
griffenen Objektvariablen enthält, nicht direkt (wir könnten aber über
this darauf zugreifen – siehe Abschnitt 2.1.4). Bei Zugriffen schreiben
wir einfach nur die Namen der Objektvariablen hin, ohne dazuzuschrei-
ben, dass es sich z. B. um die Objektvariablen des Objekts handelt, das
in der Variablen t von Listing 2.4 steht. Wie wir in Listing 2.6 sehen,
kann sich ein Zugriff auf eine Objektvariable manchmal auf das Objekt
in x beziehen, dann wieder auf das in y. So wie eine Ausführung von
x.print() nur die Objektvariablen von x verwendet, greift eine Aus-
37
2 Datenabstraktion
Listing 2.6 Überlappende Verwendungen mehrerer Objekte derselben Klasse
1 private static void testBoxedText2 () {
2 BoxedText x = new BoxedText ();
3 BoxedText y = new BoxedText ();
4 x. newDimensions (10 , 3);
5 y. newDimensions (20 , 1);
6 x. setLine (1 , " Das ist ein Text ");
7 y. setLine (0 , " Anderer Text ");
8 x. print ();
9 y. print ();
10 }
führung von y.print() nur auf Objektvariablen von y zu. Es werden
zwei unterschiedliche umrandete Texte ausgegeben.
In Zeile 32 von Listing 2.5 wird toString() aufgerufen, ohne an-
zugeben, in welchem Objekt die Methode ausgeführt werden soll (das
Objekt, das normalerweise links von „.“ steht). Es wird die ab Zeile
35 definierte Objektmethode aufgerufen. Wir können in einer Objekt-
methode (nicht in einer Klassenmethode) eine andere ObjektmethodeAufruf im selben
Objekt desselben Objekts aufrufen, ohne dabei das Objekt anzugeben; es ist
ja ohnehin dasselbe Objekt. Auf diese Weise wird auch fill in den
Zeilen 11 und 22 von Listing 2.5 aufgerufen. Wenn wir eine Klassen-
methode ohne Klasse und Punkt vor dem Methodennamen aufrufen,Aufruf in selber
Klasse wird die Methode dieses Namens in der gleichen Klasse (unabhängig
von einem Objekt) ausgeführt.
Neben Objektvariablen unterstützt Java Klassenvariablen, die mitKlassenvariable
static in einer Klasse deklariert sind. Eine Klassenvariable existiert
nur einmal pro Klasse, nicht in jedem Objekt. Auf Klassenvariablen
können Klassenmethoden und Objektmethoden zugreifen. Der sinnvol-
le Einsatz von Klassenvariablen mit veränderlichen Werten ist schwie-
rig. Wir verwenden Klassenvariablen daher meist nur als Konstanten
(static final Variablen). Gelegentlich greifen wir über vordefinierte
Klassen auf Klassenvariablen zu, z. B. auf in und out in der Klasse
System: In Zeile 32 von Listing 2.5 wird die Objektmethode println
in dem Objekt aufgerufen, das in out von System steht.
Aufgabe 2.1 Aus didaktischen Gründen verzichten wir in Beispiel-
programmen auf Kommentare; Programme sollen durch ihr Verhalten
verstanden werden, nicht nur intuitiv durch Namen und Kommentare.
Schreiben Sie zum Kopf jeder Methode in allen Beispielen, auch den
noch folgenden, einen kurzen, aussagekräftigen Kommentar, der besagt,
38
2.1 Prinzip und Sprachunterstützung
wozu die Methode dient und worauf bei der Verwendung zu achten ist,
sodass die Außensicht deutlich erkennbar wird. Schreiben Sie außer-
dem zur Deklaration jeder Objektvariablen einen kurzen Kommentar,
der besagt, wozu die Variable dient.
Aufgabe 2.2 Beschreiben Sie Gemeinsamkeiten und Unterschiede zwi-
schen Klassen- und Objektmethoden. Beschreiben Sie, anhand welcher
Kriterien Sie sich für welche Art von Methode entscheiden.
Aufgabe 2.3 Veranschaulichen Sie sich, welche Variablen bei Ausfüh-
rung der Methode in Listing 2.6 (auch in dabei erzeugten Objekten)
angelegt werden und welche Werte sie nach jedem Ausführungsschritt
enthalten. Beschreiben Sie die einzelnen Schritte.
2.1.3 Data-Hiding
Datenabstraktion ist die kombinierte Anwendung von Datenkapselung
und Data-Hiding, das „Verstecken“ von Implementierungsdetails vor
Zugriffen von außen. Durch Data-Hiding bekommen wir zwei verschie-
dene Sichten auf einen abstrakten Datentyp, die abstrakte Außensicht Außensicht
wie in Listing 2.3 und die Implementierungsdetails offenlegende Innen-
sicht wie in Listing 2.5. Wir brauchen beide, die Außensicht für die Innensicht
Verwendung und die Innensicht für die Implementierung des abstrak-
ten Datentyps. Diese Sichten unterscheiden sich meist wesentlich von-
einander, weil verschiedene Interessen dahinterstecken:
• Die Außensicht ist die Anwendersicht. Als Zusammenfassung von Außensicht für
AnwenderListing 2.3 wird man zuerst mit newDimension die Größe eines
umrandeten Texts bestimmen, danach über setLine Textinhalte
in die einzelnen Zeilen schreiben, über print ausgeben und bei
Bedarf einzelne Schritte wiederholen, wobei zu bedenken ist, dass
newDimension alte Textinhalte löscht.
• Die Innensicht konzentriert sich auf die Implementierung der Me- Innensicht zum
Implementierenthoden mit den nötigen Objektvariablen. Variablen und Typen
werden so gewählt, dass die Implementierungen möglichst ein-
fach sind und dennoch den Beschreibungen entsprechen.
Wir müssen die Sichten in Einklang zueinander bringen. Die Außen-
sicht entwerfen wir so, dass eine Implementierung mit vertretbarem
Aufwand möglich scheint. Danach gestalten wir die Innensicht, sodass
alle nötigen Aspekte der Außensicht bestmöglich erfüllt sind.
39
2 Datenabstraktion
Bei Data-Hiding geht es darum, welche Methoden und Variablen3
als public und welche als private definiert bzw. deklariert sind.4Java
Mit public kennzeichnen wir alles, was in der Außensicht von Bedeu-public überall
sichtbar tung ist, mit private jenes, was zur Implementierung der Innensicht
benötigt wird und von außen nicht gesehen werden muss. Da Objekt-
und Klassenvariablen fast immer Implementierungsdetails darstellen,
sollten sie auch fast immer mit private deklariert sein. Bei Methodenprivate nur in
Innensicht unterscheiden wir zwischen den auch von außen aufrufbaren public
Methoden und als private definierten Hilfsmethoden. Beispielsweise
ist fill in Listing 2.5 eine Hilfsmethode, da sie in Listing 2.3 nicht
vorkommt und daher als private definiert ist. Wir definieren fill als
private weil wir fill von außen nicht verwenden wollen. Es stimmt
zwar, dass wir fill wegen private von außen nicht verwenden dür-
fen, aber wenn wir dies wollten, hätten wir fill als public definiert.
Es ist vorteilhaft, Abstraktionen einfach zu halten. Das heißt, mög-
lichst viel von der unvermeidbaren Komplexität soll in der Innensicht
abstrakter Datentypen versteckt bleiben. Wir verwenden private da-eher private
her so oft wie möglich, public nur dann, wenn die Verwendung in
der Außensicht unverzichtbar ist. Dies wirkt sich positiv aus, wenn die
Implementierung eines abstrakten Datentyps, beispielsweise zur Kor-
rektur von Fehlern, geändert werden muss. Solange nur die Innensicht
von der Änderung betroffen ist, bleibt die Änderung auf die Implemen-
tierung des abstrakten Datentyps beschränkt, andere Programmteile
müssen nicht geändert werden. Ist die Außensicht betroffen, müssen
auch viele Stellen, an denen der abstrakte Datentyp verwendet wird,
geändert werden. Das können uns unbekannte Stellen sein. Indem wir
die Außensicht einfach halten, erhöhen wir die Wahrscheinlichkeit da-
für, dass nötige Änderungen nur die Innensicht betreffen. Würden wir
Listing 2.5 so ändern, dass text vom Typ String[] wäre, müssten
wir zwar fast jede Methode in Listing 2.5 umschreiben, da aber nur
die Innensicht betroffen wäre, würden Aufrufe wie in Listing 2.4 und
Listing 2.6 weiterhin funktionieren. Würden wir dagegen den Typ des
formalen Parameters txt in setLine auf char[] ändern, wäre die
Außensicht betroffen und wir müssten alle Listings 2.3 bis 2.6 ändern.
3Gemeint sind hier Objektmethoden, Klassenmethoden, Objektvariablen und Klas-
senvariablen. Wir sprechen vereinfacht von Methoden und Variablen, wenn es im
entsprechenden Kontext keine Rolle spielt, ob static dabei steht oder nicht.
4Neben public und private gibt es noch protected und Default-Sichtbarkeit
(ohne angegebenen Modifier für die Sichtbarkeit). Wir verwenden vorläufig nur
public und private, da diese Sichtbarkeiten vollkommen ausreichen.
40
2 Datenabstraktion
Das ist möglich, weil der deklarierte Typ von p gleich der Klasse ist, in
der wir uns beﬁnden. Tatsächlich bedeutet private, dass nur innerhalb
der Klasse auf mit diesem Modiﬁer versehene Variablen und Methoden
zugegriﬀen werden kann, unabhängig davon, zu welchem Objekt ei-
ne Objektvariable oder Objektmethode gehört. Diese Bedeutung von
private ist praktisch und logisch, weil ohnehin alle Objekte derselben
Klasse dieselbe Innensicht haben. In origin kommt die Außensicht
von p zum Tragen (weil wir ein Objekt vom Typ Point verwenden,
nicht implementieren), gleichzeitig aber auch die Innensicht von Point
(origin ist in Point implementiert).
Auf Klassen bedeutet public etwas anderes. Jede public Klassepublic Klasse
muss in einer Datei desselben Namens (abgesehen von der Erweiterung)
stehen, und nur solche Klassen sind allgemein verwendbar. Vorläuﬁg
deﬁnieren wir jede Klasse mit public class. Wenn wir public weg-
lassen, kann die Klasse nur als Hilfsklasse verwendet werden, die von
einer public Klasse kontrolliert wird – vergleichbar mit Hilfsmethoden
in Klassen. Verwendungsmöglichkeiten werden wir später sehen.
Aufgabe 2.4 Ändern Sie Listing 2.5, sodass text vom Typ String[]
ist, aber dennoch alle Details von Listing 2.3 eingehalten werden. Be-
schreiben Sie anhand dieses Beispiels und allgemein, wie abstrakte Da-
tentypen Programmänderungen unterstützen können.
Aufgabe 2.5 Beschreiben Sie, was wir unter Datenkapselung und Data-
Hiding verstehen, wodurch sich diese beiden Begriﬀe voneinander un-
terscheiden und wie sie sich gegenseitig ergänzen.
Aufgabe 2.6 Beschreiben Sie, warum Objektvariablen und (sofern
möglich) auch Methoden private sein sollen.
Aufgabe 2.7 Beschreiben Sie Zusammenhänge zwischen der Verwen-
dung von private bzw. public und der Innen- bzw. Außensicht von
Objekten. Machen Sie deutlich, welche private Variablen und Metho-
den auch über die Außensicht eines Objekts zugreifbar sind.
Aufgabe 2.8 Beschreiben Sie die Bedeutung von public auf Klassen-
deﬁnitionen.
2.1.4 Objekterzeugung
Ein neues Objekt erzeugen wir mit dem new-Operator. BeispielsweiseJava
liefert die Ausführung von new Point() ein neues Objekt vom Typ
42
2.1 Prinzip und Sprachunterstützung
Listing 2.8 Klasse mit Konstruktor zur Initialisierung von Objekten
1 public class Point {
2 private int x , y ;
3
4 public Point ( int initX , int initY ) {
5 x = initX ;
6 y = initY ;
7 }
8 ...
9 }
Point. Jedes so erzeugte Objekt hat eine eigene Identität. Wir stellen
uns das vereinfacht so vor, dass beim Erzeugen eines Objekts Spei-
cherplatz reserviert wird, in dem Objektvariablen und zur Objektver-
waltung nötige Daten abgelegt werden. Die Anfangsadresse des Spei- Identität
cherplatzes entspricht der Objektidentität. Variablen von Referenzty-
pen enthalten solche Anfangsadressen und referenzieren damit Objekte.
Zwei Anwendungen des new-Operators liefern zwei Objekte mit unter-
schiedlichen Speicheradressen, diese Objekte sind nicht identisch. Wenn
jedoch zwei Variablen dieselbe Objektadresse enthalten, sind die von
diesen Variablen referenzierten Objekte identisch – nur ein Objekt mit
zwei Referenzen darauf.
Ein wesentlicher Schritt bei der Objekterzeugung ist die Initialisie- Initialisierung
rung von Objektvariablen. Anders als bei lokalen Variablen gibt es für
Objektvariablen keine klar erkennbare sequentielle Abfolge von Varia-
blenzugriﬀen. Der Compiler kann Lesezugriﬀe unmittelbar nach der
Objekterzeugung (noch vor der Initialisierung) nicht ausschließen. Da-
her werden alle Objekt- und Klassenvariablen automatisch mit null
oder 0 bzw. dem Null-Wert des entsprechenden Typs vorinitialisiert
bevor die Objekterzeugung abgeschlossen ist. Erst nach abgeschlossener
Objekterzeugung erfolgt die eigentliche Initialisierung der Objektvaria-
blen mit den Werten, die in den Deklarationen angegeben sind – siehe
Zeile 3 in Listing 2.7 und die Zeilen 3 bis 5 in Listing 2.5.
In new Scanner(System.in) wird ein aktueller Parameter verwen-
det, der vermutlich irgendwie (auf unbekannte Weise) zur Initialisie-
rung von Objektvariablen dient. Das Sprachkonzept dahinter sind Kon-
struktoren. Sie ähneln Objektmethoden, dienen aber ausschließlich zur Konstruktor
Initialisierung von neuen Objekten (Zeilen 4 bis 7 in Listing 2.8). Die
Erzeugung eines Objekts von Point (entsprechend Listing 2.8) er-
folgt z. B. mit new Point(4, 5), wobei der Konstruktor unmittelbar
43
2 Datenabstraktion
nach Erzeugung des Objekts ausgeführt wird. Die formalen Parameter
initX und initY enthalten die entsprechenden aktuellen Parameter
4 und 5, welche an x und y zugewiesen werden und dabei die vor-
initialisierten Variableninhalte ersetzen. Syntaktisch unterscheidet sich
ein Konstruktor von einer Objektmethode dadurch, dass der Ergeb-
nistyp fehlt und der Name gleich dem Klassennamen ist. Der Rumpf
des Konstruktors kann beliebige Anweisungen enthalten, genauso wie
eine Objektmethode mit Ergebnistyp void. Üblicherweise dient ein
Konstruktor nur zur Initialisierung von Objektvariablen, wobei die Be-
rechnung der Initialisierungswerte auch aufwendig sein kann. Aufgrund
dieser Verwendung versteht es sich von selbst, dass Konstruktoren nicht
static sein können. Bezüglich der Sichtbarkeit ist alles möglich, wobei
mittels eines als private deklarierten Konstruktors nur innerhalb der
Klasse ein Objekt dieser Klasse erzeugt werden kann.
Nach new steht stets ein Konstruktoraufruf. Daher benötigt jede
Klasse, von der es Objekte geben soll, zumindest einen Konstruktor. In
bisherigen Beispielen haben wir jedoch keine Konstruktoren deﬁniert.
Das ist möglich, weil der Compiler für jede Klasse ohne deﬁnierten
Konstruktor (und nur für solche Klassen) automatisch einen Default-
Konstruktor einführt, das ist ein Konstruktor folgender Form:Default-
Konstruktor
public Klassenname() {}
Dieser Konstruktor ist also überall sichtbar, hat keine Parameter und
macht bei der Ausführung nichts. Entsprechend Listing 2.8 müssen wir
bei der Objekterzeugung unbedingt zwei aktuelle Parameter überge-
ben, weil es einen expliziten Konstruktor mit zwei Parametern, aber
keinen Default-Konstruktor gibt. Anders für die Klassen in Listing 2.5
und Listing 2.7: Hier gibt es nur den Default-Konstruktor, weswegen
wir keine aktuellen Parameter angeben.
Eine Klasse kann mehrere Konstruktoren enthalten. In diesem Fallüberladene
Konstruktoren sind die Konstruktoren überladen, genauso wie Methoden überladen
sein können. Der Compiler entscheidet anhand der Anzahl und der
deklarierten Typen der aktuellen Parameter, welcher Konstruktor aus-
zuführen ist. Listing 2.9 zeigt eine Klasse mit mehreren Konstrukto-
ren. Damit verwendet new Point(2, 3) den ersten Konstruktor der
Klasse, new Point() den zweiten und new Point(new Point()) den
zweiten sowie dritten.
Listing 2.9 zeigt Anweisungen der Form this(...);. Sie rufen Kon-Weiterleitung zu
Konstruktor struktoren derselben Klasse auf und führen sie auf gleiche Weise wie
Methoden aus. Konkret führt this(1, 1); im Rumpf des zweiten
44
2.1 Prinzip und Sprachunterstützung
Listing 2.9 Klasse mit mehreren Konstruktoren; this und this(...);
1 public class Point {
2 private int x , y ;
3
4 public Point ( int x , int y) {
5 this .x = x ;
6 this .y = y ;
7 }
8 public Point () {
9 this (1 , 1);
10 }
11 public Point ( Point p ) {
12 this (p .x , p. y );
13 }
14
15 public Point copy () {
16 return new Point ( this );
17 }
18
19 ...
20 }
Konstruktors den ersten Konstruktor aus, x und y werden mit 1
initialisiert. Im dritten Konstruktor führt this(p.x, p.y); ebenso
den ersten Konstruktor aus, sodass eine Kopie von p (also ein neu-
es Objekt mit den gleichen Werten in den Objektvariablen) entsteht.
Es gibt jedoch eine bedeutende Einschränkung: Anweisungen der Form
this(...); dürfen nur ganz am Anfang eines Konstruktors stehen,
sonst nirgends. Wenn Programmtexte wie Methoden aufgerufen wer-
den sollen, müssen wir auch Methoden verwenden, nicht Konstrukto-
ren. Methoden sind in Konstruktoren uneingeschränkt aufrufbar.
Listing 2.9 zeigt Verwendungen der Pseudovariablen this. Pseudo- Selbstreferenz
variable bedeutet, dass this zwar wie eine normale Variable gelesen,
ihr Wert von uns aber nicht selbst geschrieben werden kann. Der Wert
von this ist stets eine Referenz auf das Objekt, in dem wir uns gera-
de beﬁnden und zu dem die gerade direkt zugreifbaren Objektvariablen
gehören. Innerhalb eines Konstruktors ist es das Objekt, das gerade in-
itialisiert wird. Ist x eine Objektvariable, können wir statt x auch
this.x schreiben um deutlich zu machen, dass das x des aktuellen
Objekts gemeint ist – im Gegensatz zu p.x eines anderen Objekts p.
In den Zeilen 5 und 6 von Listing 2.9 machen wir das aus einem ganz
bestimmten Grund: Die formalen Parameter des ersten Konstruktors
heißen zufällig genau gleich wie die Objektvariablen. In einem solchen verdeckte
Variable
45
2 Datenabstraktion
Fall verdecken die formalen Parameter die Objektvariablen, das heißt,
mit x bezeichnen wir innerhalb des ersten Konstruktors den forma-
len Parameter, nicht die gleichnamige Objektvariable. Mittels this.x
greifen wir dagegen auf die Objektvariable zu, nicht den formalen Pa-
rameter. Generell können formale Parameter und lokale Variablen Ob-
jektvariablen verdecken, wobei die Objektvariablen über this dennoch
zugreifbar bleiben. In Zeile 16 verwenden wir die Pseudovariable this
weil das Objekt, in dem wir uns gerade beﬁnden, als aktueller Para-
meter verwendet wird. Auch dieser Fall tritt häuﬁg auf. Innerhalb von
static Methoden ist this nicht verwendbar, da dort kein aktuelles
Objekt zugreifbar ist und keine Objektvariablen sichtbar sind.
Aufgabe 2.9 Beschreiben Sie, warum und womit Objektvariablen au-
tomatisch vorinitialisiert werden.
Aufgabe 2.10 Beschreiben Sie, wozu und wie Konstruktoren verwen-
det werden (auch dann, wenn im Programmtext einer Klasse kein Kon-
struktor steht) und wodurch sie sich von Methoden unterscheiden.
Aufgabe 2.11 Beschreiben Sie, wozu this und this(...) dienen
und wo diese Ausdrücke verwendbar sind.
2.2 Datenstrukturen und abstrakte Datentypen
Unter einer Datenstruktur verstehen wir eine Beschreibung der Art und
Weise, wie die Daten dargestellt sind und wie sie zusammenhängen,
sowie der Operationen, über die wir auf diese Daten zugreifen. Die Be-
schreibung legt das Verhalten der Operationen fest und abstrahiert von
der konkreten Implementierung. Wir können allgemeine Eigenschaften
der Datenstruktur gänzlich unabhängig von einer bestimmten Imple-
mentierung oder Programmiersprache betrachten.
Eine Datenstruktur wird meist als abstrakter Datentyp implemen-
tiert. Die Implementierung betrachten wir auf abstrakter Ebene aus
zumindest zwei Blickwinkeln – als Datenstruktur und als Außensicht
des abstrakten Datentyps. Diese Blickwinkel geben in der Regel un-Datenstruktur
6
=
Datenabstraktion terschiedliche Details der Implementierung preis. Die Datenstruktur
muss alle Zusammenhänge zwischen den Daten detailliert beschreiben,
die für die Außensicht des abstrakten Datentyps bedeutungslos sind.
Umgekehrt muss die Außensicht Typen formaler Parameter in public
Methoden (das sind Operationen aus dem Blickwinkel der Datenstruk-
tur) im Detail beschreiben, die für die Datenstruktur keine Rolle spie-
len. Übergänge sind ﬂießend. Wir sprechen eher von Datenstrukturen,
46
2.2 Datenstrukturen und abstrakte Datentypen
wenn wir uns auf Beziehungen zwischen Daten konzentrieren, und von
abstrakten Datentypen, wenn es um die Implementierung oder deren
Außensicht geht.
Betrachten wir zum Beispiel ein Array. Als Datenstruktur ist ein
Array eine Aufeinanderfolge direkt hintereinander stehender Arrayein-
träge, auf die sowohl schreibend als auch lesend über einen Index zuge-
griﬀen werden kann. Die Größe ist beschränkt und unveränderlich. Für
die Beschreibung des Arrays als Datenstruktur spielt es keine Rolle,
welche Typen die Arrayeinträge und Indexe haben und welche Syntax
für Arrayzugriﬀe verwendet wird. Als abstrakter Datentyp von außen
betrachtet sind die Typen der Arrayeinträge und Indexe von großer
Bedeutung, ebenso die Syntax der Zugriﬀe. Auch aus der Außensicht
des abstrakten Datentyps ist die Arraygröße beschränkt und unver-
änderlich, und es kann sowohl lesend als auch schreibend zugegriﬀen
werden. Aber es spielt keine Rolle, wie die Arrayeinträge angeordnet
sind (direkt hintereinander oder sonst irgendwie), solange es eine ﬁxe
Zuordnung zwischen Index und Eintrag gibt.
2.2.1 Datensätze
Zu den einfachsten Datenstrukturen zählt der Datensatz. Er besteht
aus einer vorgegebenen Menge zusammengehöriger Variablen, auf die
lesend und bei Bedarf schreibend zugegriﬀen wird. Zum Beispiel ist
ein durch new Student(...) erzeugtes Objekt ein Datensatz, wobei
Listing 2.10 den entsprechenden abstrakten Datentyp implementiert.
Neben den private Variablen des Datensatzes enthält die Klasse nur
einen public Konstruktor und public Getter- und Setter-Methoden
entsprechend der Zugriﬀsoperationen der Datenstruktur. Das ist ty-
pisch für eine direkte Implementierung eines Datensatzes.
Ein Datensatz verbindet die darin enthaltenen Variablen zu einer
Einheit. Wenn wir ein Objekt vom Typ Student als aktuellen Para-
meter an eine Methode übergeben, hat die aufgerufene Methode über
die Getter- und Setter-Methoden Zugriﬀ auf alle darin enthaltenen Va-
riablen. Noch wichtiger ist, dass andere Datenstrukturen wie Arrays
Datensätze enthalten und Methoden Datensätze als Ergebnisse zurück-
geben können – siehe Listing 2.11. Auf diese Weise kann ein einziger
Arrayeintrag in gewissem Sinn mehrere Variablen enthalten und ein
einziger Methodenaufruf mehrere Werte als Ergebnis zurückgeben.
Kommentare wurden in Listing 2.10 weggelassen. Wir können uns
dennoch gut vorstellen, was die Methoden machen: „Sets/Returns . . . “
47
2 Datenabstraktion
Listing 2.10 Einfacher Datensatz mit einfachen Zugriﬀsoperationen
1 public class Student {
2 private final int regNumber ;
3 private String name ;
4 private String mail ;
5
6 public Student ( int regNumber , String name ) {
7 this . regNumber = regNumber ;
8 setName ( name );
9 setMail (" e "+ regNumber +" @student . tuwien . ac . at ");
10 }
11
12 public int regNumber () {
13 return regNumber ;
14 }
15
16 public String getName () {
17 return name ;
18 }
19
20 public void setName ( String name ) {
21 this . name = name ;
22 }
23
24 public String getMail () {
25 return mail ;
26 }
27
28 public void setMail ( String mail ) {
29 this . mail = mail ;
30 }
31 }
Listing 2.11 Datensätze erleichtern den Umgang mit zusammenhängenden Daten
1 private static Student find ( Student [] studs , int reg ) {
2 for ( Student stud : studs ) {
3 if ( stud . regNumber == reg ) {
4 return stud ;
5 }
6 }
7 return new Student ( reg , " Max Mustermann ");
8 }
48
2.2 Datenstrukturen und abstrakte Datentypen
Wir betrachten die Menge dieser gedachten Methodenbeschreibungen
gleichzeitig als Außensicht des abstrakten Datentyps und als Daten-
struktur. Bei einfachen Datensätzen sind die Daten unabhängig von-
einander, sodass die Datenstruktur nicht mehr beschreiben muss als
die Außensicht des abstrakten Datentyps. Aber die Außensicht gibt De-
tails preis, über die die Datenstruktur abstrahiert: Die Typen String
und int der Variablen werden in den Getter- und Setter-Methoden
sichtbar und sind bedeutende Bestandteile der Außensicht, da Wis-
sen über diese Typen für die Verwendung notwendig ist. Das Ergebnis
von regNumber() kann etwa nur zwischen −231 und 231 − 1 liegen. Details auch in
AußenansichtBei Betrachtung einer Datenstruktur abstrahieren wir über solche De-
tails, damit mögliche Implementierungen nicht unnötig eingeschränkt
werden. Es kann (sowohl bei Betrachtung als abstrakter Datentyp als
auch als Datenstruktur) beabsichtigt sein, dass der Wertebereich von
regNumber() uneingeschränkt bleibt. Wäre der Wertebereich vor ei-
nigen Jahren auf 0 bis 9999999 eingeschränkt worden, hätte die 2017
erfolgte Umstellung auf achtstellige Matrikelnummern Programmän-
derungen nötig gemacht. Auch durch die Verwendung von int ist
Listing 2.10 so eingeschränkt, dass eine Umstellung auf zehnstellige
Matrikelnummern Änderungen erfordern würde.
Die Verwendung eines Datensatzes wie in Listing 2.10 mag uns zu-
nächst als sehr einfach erscheinen. Wenn wir jedoch Student in ein einfacher
Datensatz
→
externe
Methoden
Programm einbetten, das Daten zu Studierenden verwaltet, werden
wir bald bemerken, dass der größte Teil des Programms außerhalb
von Student geschrieben werden muss. Alleine das Einlesen neuer,
zu ändernder Daten benötigt viele Programmzeilen. Ein stärker mit
Funktionalität angereicherter abstrakter Datentyp, wie in Listing 2.12
skizziert, verlagert den Programmtext ins Innere der Klasse.
Die Grundstruktur bestehend aus Objektvariablen und Konstruktor
ist im Vergleich zu Listing 2.10 gleich geblieben. Aber die Methoden
sind wesentlich speziﬁscher auf eine bestimmte Anwendung zugeschnit-
ten. Sie enthalten die komplette Funktionalität um persönliche Daten
auszugeben und zu editieren sowie Mails an Studierende zu versenden.
Damit ist es einfacher, ein Programm zur Verwaltung von Studierenden
zu schreiben, weil ein großer Teil des nötigen Programmtexts bereits in
Student enthalten ist. Außer für anwendungsneutrale abstrakte Daten- speziﬁsche
Operationen
in die Klasse
typen, die man häuﬁg in vorgefertigten Klassenbibliotheken ﬁndet, soll-
ten wir generell anwendungsspeziﬁsche Operationen wie in Listing 2.12
bevorzugen und Getter- und Setter-Methoden meiden. Allerdings ist
die Datenstruktur eines Datensatzes in Listing 2.12 schwer erkennbar,
49
